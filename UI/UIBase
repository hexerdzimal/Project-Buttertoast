import tkinter as tk
import json
from tkinter import ttk, filedialog
from PIL import Image, ImageTk
from tkinter import messagebox
import os

# Basis-Klasse für die UI
class UIBase:
    def openFile(self, file_type):
        return filedialog.askopenfilename(title=f"{file_type}-Datei auswählen")

    def saveFile(self):
        return filedialog.asksaveasfilename(title="Speicherort auswählen")

    def enterPassword(self, password=None):
        return password if password else "buttertoast"

    def startProcessing(self, host, volume, password, output):
        print(f"Host: {host}, Volume: {volume}, Passwort: {password}, Ausgabe: {output}")
        return (volume, host, output, password)

    def exit(self):
        print("Beenden")
        exit()


# GUI-Klasse
class GUI(UIBase):
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Buttertoast")
        self.root.geometry("700x700")
        self.root.minsize(700, 700)
        self.root.resizable(False, False)

        self.image_path = os.path.join(os.path.dirname(__file__), "..", "BuTo1.png")
        self.img = Image.open(self.image_path)
        self.img = self.img.resize((700, 700), Image.LANCZOS)
        self.background_image = ImageTk.PhotoImage(self.img)

        self.canvas = tk.Canvas(self.root)
        self.canvas.pack(fill="both", expand=True)
        self.bg_image_id = self.canvas.create_image(0, 0, anchor="nw", image=self.background_image)

        self.host_path = tk.StringVar()
        self.volume_path = tk.StringVar()
        self.save_path = tk.StringVar()
        self.password = tk.StringVar(value="buttertoast")
        self.show_password_var = tk.BooleanVar(value=False)

        self.create_widgets()
        self.root.protocol("WM_DELETE_WINDOW", lambda: self.on_exit_click(None)) 
        self.root.mainloop()

    def create_widgets(self):
        self.password_entry = ttk.Entry(self.root, show="*", textvariable=self.password, width=10)
        self.show_password_checkbox = tk.Checkbutton(self.canvas, variable=self.show_password_var, command=self.toggle_password, bg="white")
        self.canvas.create_window(585, 10, anchor="nw", window=self.password_entry)
        self.canvas.create_window(660, 10, anchor="nw", window=self.show_password_checkbox)
        
        self.canvas.tag_bind(self.create_text_button("Host-Datei auswählen", 10, 10), "<Button-1>", self.on_host_click)
        self.canvas.tag_bind(self.create_text_button("Guest-Datei auswählen", 170, 10), "<Button-1>", self.on_volume_click)
        self.canvas.tag_bind(self.create_text_button("Speicherort auswählen", 340, 10), "<Button-1>", self.on_save_click)
        self.canvas.tag_bind(self.create_text_button("Ausführen", 100, 650, size=16), "<Button-1>", self.on_execute_click)
        self.canvas.tag_bind(self.create_text_button("Abbrechen", 500, 650, size=16), "<Button-1>", self.on_exit_click)

    def create_text_button(self, text, x, y, size=12):
        return self.canvas.create_text(x, y, text=text, font=("Helvetica", size), fill="black", activefill="yellow", anchor="nw")

    def toggle_password(self):
        self.password_entry.config(show="" if self.show_password_var.get() else "*")

    def on_host_click(self, event):
        self.host_path.set(self.openFile("Host"))

    def on_volume_click(self, event):
        self.volume_path.set(self.openFile("Guest"))

    def on_save_click(self, event):
        self.save_path.set(self.saveFile())

    def on_execute_click(self):
        # Die Ergebnisse werden hier zurückgegeben
        result = self.startProcessing(
            self.host_path.get(),
            self.volume_path.get(),
            self.password.get(),
            self.save_path.get()
        )
        # Resultate weitergeben
        print("Ergebnisse: ", result)
        return result

    def on_exit_click(self, event):
        if messagebox.askokcancel("Beenden", "Möchten Sie das Programm wirklich beenden?"):
            print("Das Programm wird beendet.")
            exit
            self.root.quit() 
        return None


# Shell-UI-Klasse
class ShellUI(UIBase):
    def openFile(self, file_type):
        return input(f"Geben Sie den Dateipfad für {file_type} ein: ")

    def saveFile(self):
        return input("Geben Sie den Speicherpfad für die Ausgabe ein: ")

    def enterPassword(self, password=None):
        if password:
            return password
        return input("Geben Sie das Passwort ein (Standard: buttertoast): ") or "buttertoast"

    def __init__(self):
        print (r"""

               
                 
             +===================================================================================================+
            |                                                                         Version: 0.1 (burnt) 2024 |
            |   ██████╗ ██╗   ██╗████████╗████████╗███████╗██████╗ ████████╗ ██████╗  █████╗ ███████╗████████╗  |
            |   ██╔══██╗██║   ██║╚══██╔══╝╚══██╔══╝██╔════╝██╔══██╗╚══██╔══╝██╔═══██╗██╔══██╗██╔════╝╚══██╔══╝  |
            |   ██████╔╝██║   ██║   ██║      ██║   █████╗  ██████╔╝   ██║   ██║   ██║███████║███████╗   ██║     |
            |   ██╔══██╗██║   ██║   ██║      ██║   ██╔══╝  ██╔══██╗   ██║   ██║   ██║██╔══██║╚════██║   ██║     |
            |   ██████╔╝╚██████╔╝   ██║      ██║   ███████╗██║  ██║   ██║   ╚██████╔╝██║  ██║███████║   ██║     |
            |   ╚═════╝  ╚═════╝    ╚═╝      ╚═╝   ╚══════╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝   ╚═╝     |
            |                                    The melting pot of polyglot.                                   |
            +===================================================================================================+
                                            by Fabian Kozlowski, Stefan Leippe, Malte Muthesius, Matthias Ferstl
               

                            

            """)        
        self.run()

    def run(self):
        host = self.openFile("Host")
        volume = self.openFile("Guest")
        password = self.enterPassword()
        output = self.saveFile()
        result = self.startProcessing(host, volume, password, output)
        print("Ergebnisse: ", result)
        return result

# Konfiguration laden
def load_config():
    config_path = os.path.join(os.path.dirname(__file__), "..", "config.json")    

    if not os.path.exists(config_path):
        raise FileNotFoundError(f"Die Konfigurationsdatei {config_path} wurde nicht gefunden.")
    
    with open(config_path, "r") as file:
        config = json.load(file)
    
    return config

# Wird von der Engine aufgerufen um das GUI/SUI zu öffnen
def loadMUI():
    try:
        config = load_config()
    except FileNotFoundError as e:
        print("Config Datei nicht gefunden, das Programm startet über Shell.")
        shell = ShellUI()

    if config.get("gui", False):
        gui = GUI()
    else:
        shell = ShellUI()


# Anwendung starten
if __name__ == "__main__":
    loadMUI()  